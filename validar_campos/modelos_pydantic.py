
"""
üéì MODELOS PYDANTIC - VALIDACI√ìN DE DATOS

Este archivo define c√≥mo deben ser los datos que esperamos del usuario.
Pydantic se encarga autom√°ticamente de validar que los datos cumplan con las reglas.

¬øQu√© es Pydantic?
- Es una librer√≠a de Python que valida datos autom√°ticamente
- Define "modelos" que especifican qu√© tipo de datos esperamos
- Si los datos no cumplen las reglas, lanza errores autom√°ticamente

¬øPor qu√© es importante validar datos?
- Los usuarios pueden enviar datos incorrectos (por error o maliciosamente)
- Sin validaci√≥n, nuestra aplicaci√≥n podr√≠a fallar o tener problemas de seguridad
- La validaci√≥n nos ayuda a dar mensajes de error claros al usuario
"""

# ========== IMPORTACIONES ==========
from pydantic import BaseModel, EmailStr, field_validator


# ========== MODELO DE USUARIO ==========
class User(BaseModel):
    """
    üßë‚Äçüíª Modelo de Usuario - Define c√≥mo debe ser un usuario v√°lido
    
    Este modelo especifica:
    - Qu√© campos debe tener un usuario (email y password)
    - Qu√© tipo de datos esperamos en cada campo
    - Qu√© reglas de validaci√≥n debe cumplir cada campo
    
    BaseModel es la clase base de Pydantic que nos da todas las funcionalidades
    de validaci√≥n autom√°tica.
    """
    
    # üìß CAMPO EMAIL - Validaci√≥n autom√°tica del formato de email
    # EmailStr es un tipo especial de Pydantic que:
    # - Verifica que el email tenga el formato correcto (usuario@dominio.com)
    # - Se asegura de que contenga @ y un dominio v√°lido
    # - Autom√°ticamente lanza un error si el formato es incorrecto
    email: EmailStr
    
    # üîê CAMPO PASSWORD - Campo de texto obligatorio
    # str significa que esperamos una cadena de texto
    # Este campo es obligatorio (si no se proporciona, Pydantic lanza un error)
    password: str
    
    # ========== VALIDACIONES PERSONALIZADAS ==========
    
    # üõ°Ô∏è VALIDADOR PERSONALIZADO - Reglas adicionales para la contrase√±a
    # @field_validator nos permite crear reglas de validaci√≥n personalizadas
    # En este caso, validamos que la contrase√±a tenga al menos 8 caracteres
    @field_validator('password')
    @classmethod  # Agregamos @classmethod para mejor pr√°ctica
    def validar_longitud_password(cls, valor_password):
        """
        üîç Valida que la contrase√±a tenga al menos 8 caracteres
        
        Par√°metros:
        - cls: La clase (User) - no lo usamos pero es requerido
        - valor_password: El valor de la contrase√±a que escribi√≥ el usuario
        
        Retorna:
        - El valor de la contrase√±a si es v√°lido
        
        Lanza:
        - ValueError si la contrase√±a es muy corta
        """
        # Verificamos la longitud de la contrase√±a
        if len(valor_password) < 8:
            # Si es muy corta, lanzamos un error con un mensaje claro
            raise ValueError('‚ùå La contrase√±a debe tener al menos 8 caracteres.')
        
        # Si la validaci√≥n pasa, devolvemos el valor (esto es importante)
        return valor_password
    
    # üí° EJEMPLO DE VALIDACI√ìN ADICIONAL (comentado para que veas c√≥mo agregar m√°s)
    # @field_validator('password')
    # @classmethod
    # def validar_password_segura(cls, valor_password):
    #     """Valida que la contrase√±a tenga al menos una may√∫scula y un n√∫mero"""
    #     if not any(c.isupper() for c in valor_password):
    #         raise ValueError('La contrase√±a debe tener al menos una may√∫scula')
    #     if not any(c.isdigit() for c in valor_password):
    #         raise ValueError('La contrase√±a debe tener al menos un n√∫mero')
    #     return valor_password


# ========== C√ìMO FUNCIONA TODO ESTO ==========
"""
üîÑ FLUJO DE VALIDACI√ìN:

1. El usuario llena el formulario y hace clic en "Login"
2. FastAPI recibe los datos del formulario
3. En main.py, intentamos crear un objeto User con esos datos:
   usuario = User(email=email, password=password)
4. Pydantic autom√°ticamente valida:
   - Que el email tenga formato v√°lido (gracias a EmailStr)
   - Que la contrase√±a tenga al menos 8 caracteres (gracias a nuestro validador)
5. Si todo est√° bien, se crea el objeto User sin problemas
6. Si algo est√° mal, Pydantic lanza un ValidationError con detalles del error
7. En main.py capturamos ese error y se lo mostramos al usuario

üéØ BENEFICIOS DE ESTE ENFOQUE:
- Validaci√≥n autom√°tica y consistente
- Mensajes de error claros para el usuario
- C√≥digo limpio y f√°cil de mantener
- F√°cil agregar nuevas validaciones
"""