"""
üéì PROYECTO EDUCATIVO: VALIDACI√ìN DE FORMULARIOS CON FASTAPI Y PYDANTIC

Este proyecto te ense√±a c√≥mo validar datos de formularios en el backend
de una aplicaci√≥n web usando FastAPI y Pydantic.

¬øQu√© aprender√°s?
- C√≥mo crear formularios HTML
- C√≥mo recibir datos del formulario en el backend
- C√≥mo validar esos datos usando Pydantic
- C√≥mo mostrar errores de validaci√≥n al usuario
- C√≥mo usar plantillas Jinja2 para renderizar HTML din√°mico
"""

# ========== IMPORTACIONES ==========
# Aqu√≠ importamos todas las librer√≠as que necesitamos

# üìù Annotated: Nos permite agregar metadatos a los tipos de datos
# Por ejemplo, podemos especificar que un par√°metro viene de un formulario
from typing import Annotated

# üö® ValidationError: Esta excepci√≥n se lanza cuando Pydantic encuentra datos inv√°lidos
# Es muy importante capturarla para manejar errores de validaci√≥n
from pydantic import ValidationError

# üöÄ FastAPI: El framework web que usamos
# - FastAPI: La clase principal para crear nuestra aplicaci√≥n
# - Request: Representa la petici√≥n HTTP que llega al servidor
# - Form: Indica que un par√°metro viene de un formulario HTML
from fastapi import FastAPI, Request, Form

# üé® Jinja2Templates: Nos permite usar plantillas HTML din√°micas
# Con esto podemos insertar datos de Python dentro de nuestro HTML
from fastapi.templating import Jinja2Templates

# üìÅ StaticFiles: Nos permite servir archivos est√°ticos como CSS, im√°genes, etc.
from fastapi.staticfiles import StaticFiles 

# üë§ User: Nuestro modelo de datos personalizado (est√° en modelos_pydantic.py)
# Este modelo define qu√© datos esperamos del usuario y c√≥mo validarlos
from modelos_pydantic import User

# ========== CONFIGURACI√ìN DE LA APLICACI√ìN ==========

# üèóÔ∏è Creamos nuestra aplicaci√≥n FastAPI
# - title: El nombre de nuestra aplicaci√≥n
# - version: La versi√≥n actual
# - description: Una descripci√≥n de qu√© hace nuestra aplicaci√≥n
app = FastAPI(
    title="üìö Validaci√≥n de Formularios - Proyecto Educativo", 
    version="1.0.0", 
    description="""Un ejemplo pr√°ctico para aprender c√≥mo validar formularios web 
                   usando FastAPI y Pydantic. Perfecto para estudiantes."""
)

# üé® Configuramos el motor de plantillas Jinja2
# Esto nos permite crear p√°ginas HTML din√°micas donde podemos insertar
# datos de Python (como mensajes de error) dentro del HTML
templates = Jinja2Templates(directory="templates")

# üìÅ Montamos la carpeta de archivos est√°ticos
# Esto permite que el navegador acceda a nuestros archivos CSS
# Cuando escribas "/static/archivo.css" en HTML, FastAPI buscar√° en la carpeta "static"
app.mount("/static", StaticFiles(directory="static"), name="static")


# ========== RUTAS DE LA APLICACI√ìN ==========

# üè† RUTA PRINCIPAL - Muestra el formulario de login
# El decorador @app.get("/") significa que esta funci√≥n se ejecuta
# cuando alguien visita la p√°gina principal de nuestro sitio web
@app.get("/")
async def mostrar_formulario_login(request: Request):
    """
    üìÑ Esta funci√≥n muestra la p√°gina principal con el formulario de login.
    
    ¬øQu√© hace?
    1. Recibe la petici√≥n del navegador (request)
    2. Renderiza la plantilla "login.html"
    3. Le pasa un diccionario vac√≠o de errores (porque a√∫n no ha habido errores)
    
    Par√°metros:
    - request: La petici√≥n HTTP que viene del navegador
    
    Retorna:
    - Una p√°gina HTML renderizada con el formulario
    """
    # Renderizamos la plantilla login.html
    # - name: el archivo HTML que queremos mostrar
    # - request: la petici√≥n del navegador (siempre necesaria)
    # - context: los datos que queremos pasar al HTML (en este caso, errores vac√≠os)
    return templates.TemplateResponse(
        name="login.html", 
        request=request, 
        context={"errors": {}}
    )

# üìù RUTA DE PROCESAMIENTO - Valida los datos del formulario
# El decorador @app.post("/login/") significa que esta funci√≥n se ejecuta
# cuando alguien env√≠a el formulario (m√©todo POST) a la URL "/login/"
@app.post("/login/")
async def procesar_login(
    request: Request, 
    email: Annotated[str, Form()],     # El email viene del formulario HTML
    password: Annotated[str, Form()]   # La contrase√±a viene del formulario HTML
):
    """
    üîç Esta funci√≥n procesa y valida los datos enviados desde el formulario.
    
    ¬øQu√© hace?
    1. Recibe los datos del formulario (email y password)
    2. Intenta crear un objeto User con esos datos (aqu√≠ es donde se valida)
    3. Si la validaci√≥n falla, muestra los errores al usuario
    4. Si la validaci√≥n es exitosa, muestra una p√°gina de √©xito
    
    Par√°metros:
    - request: La petici√≥n HTTP del navegador
    - email: El email que escribi√≥ el usuario (viene del input "email")
    - password: La contrase√±a que escribi√≥ el usuario (viene del input "password")
    
    Retorna:
    - Si hay errores: la p√°gina del formulario con los errores mostrados
    - Si no hay errores: una p√°gina de √©xito
    """
    
    # üõ°Ô∏è BLOQUE TRY-EXCEPT: Aqu√≠ es donde ocurre la magia de la validaci√≥n
    try:
        # üîç VALIDACI√ìN: Intentamos crear un objeto User con los datos del formulario
        # Si los datos son v√°lidos, se crea el objeto sin problemas
        # Si los datos son inv√°lidos, Pydantic lanza una ValidationError
        usuario = User(email=email, password=password)
        
        # ‚úÖ Si llegamos aqu√≠, significa que los datos son v√°lidos
        print(f"‚úÖ Usuario v√°lido creado: {usuario.email}")  # Para depuraci√≥n
        
    except ValidationError as e:
        # üö® MANEJO DE ERRORES: Si Pydantic encuentra datos inv√°lidos
        print(f"‚ùå Error de validaci√≥n detectado: {e}")  # Para depuraci√≥n
        
        # üìã Procesamos los errores para mostrarlos de forma amigable
        errors = {}
        for error in e.errors():
            # error['loc'][0] = el nombre del campo que tiene error (ej: 'email')
            # error['msg'] = el mensaje de error (ej: 'formato de email inv√°lido')
            campo_con_error = error['loc'][0]
            mensaje_error = error['msg']
            errors[campo_con_error] = mensaje_error
            
        print(f"üìã Errores procesados: {errors}")  # Para depuraci√≥n
        
        # üîÑ Devolvemos el formulario con los errores para que el usuario los vea
        return templates.TemplateResponse(
            request=request, 
            name="login.html", 
            context={"errors": errors}
        )
    
    # üéâ SI NO HAY ERRORES: Mostramos la p√°gina de √©xito
    return templates.TemplateResponse(
        "everythingok.html", 
        {"request": request}
    )